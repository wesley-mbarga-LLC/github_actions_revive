name: Compose Stack Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: compose-${{ github.ref }}
  cancel-in-progress: true

env:
  COMPOSE_FILE_CI: docker-compose.yml

jobs:
  build:
    name: Build (validate & pull)
    runs-on:
      group: Wesley-group-runner
      labels: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate docker-compose file
        run: docker compose -f "$COMPOSE_FILE_CI" config

      - name: Pre-pull service images
        run: docker compose -f "$COMPOSE_FILE_CI" pull --ignore-pull-failures

      - name: Show runner info
        run: |
          echo "Runner: ${{ runner.name }}"
          echo "Labels: ${{ runner.labels }}"

  test:
    name: Test (spin & smoke)
    needs: build
    runs-on:
      group: Wesley-group-runner
      labels: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Docker command (docker or sudo docker)
        shell: bash
        run: |
          if docker info >/dev/null 2>&1; then
            echo "DOCKER_CMD=docker" >> "$GITHUB_ENV"
          elif sudo -n docker info >/dev/null 2>&1; then
            echo "DOCKER_CMD=sudo docker" >> "$GITHUB_ENV"
          else
            echo "‚ùå Docker daemon not reachable on test runner"
            exit 1
          fi

      - name: Start stack
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" up -d

      - name: List running containers
        run: $DOCKER_CMD ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

      - name: Smoke tests (treat any HTTP status as ready)
        shell: bash
        run: |
          set -e
          wait_http_any() {
            local url="$1" name="$2" tries="${3:-30}"
            for i in $(seq 1 "$tries"); do
              code="$(curl -sS -o /dev/null -m 5 -w '%{http_code}' "$url" || echo 000)"
              if [[ "$code" != "000" ]]; then
                echo "‚úÖ $name is reachable at $url (HTTP $code)"
                return 0
              fi
              echo "‚è≥ $name not reachable yet ($i/$tries) ..."
              sleep 5
            done
            echo "‚ùå $name did not become reachable at $url"
            return 1
          }

          wait_http_any "http://localhost:9971/" "UI"
          wait_http_any "http://localhost:8081/" "Catalog"

          echo "--- UI sample ---"
          curl -s http://localhost:9971/ | head -n 20 || true
          echo "--- Catalog sample ---"
          curl -s http://localhost:8081/ | head -n 20 || true

      - name: Dump container logs on failure
        if: failure()
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" logs --no-color

      - name: Teardown stack
        if: always()
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" down -v

  deploy:
    name: Deploy (compose up -d, 5-min view, then down)
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on:
      group: Wesley-group-runner
      labels: [deploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Docker command (docker or sudo docker)
        shell: bash
        run: |
          if docker info >/dev/null 2>&1; then
            echo "DOCKER_CMD=docker" >> "$GITHUB_ENV"
          elif sudo -n docker info >/dev/null 2>&1; then
            echo "DOCKER_CMD=sudo docker" >> "$GITHUB_ENV"
          else
            echo "‚ùå Docker daemon not reachable on deploy runner"
            exit 1
          fi

      - name: Pull latest images
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" pull --ignore-pull-failures

      - name: Deploy stack
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" up -d

      - name: Show deployed containers
        run: $DOCKER_CMD ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

      # üåê Get External IP & Ports for browser access
      - name: Get External IP and Port Info
        shell: bash
        run: |
          echo "üåç Retrieving external IP address..."
          EXT_IP=$(curl -s http://ifconfig.me || echo "Unavailable")
          echo "üåê External IP: $EXT_IP"
          echo ""
          echo "üì¶ Container port mappings:"
          $DOCKER_CMD ps --format 'table {{.Names}}\t{{.Ports}}'
          echo ""
          echo "üí° Access your app at: http://$EXT_IP:<EXPOSED_PORT>"
          echo "Replace <EXPOSED_PORT> with the port mapped to your service (see above)."

      # ‚è≥ Keep the app up for 5 minutes for manual browser testing
      - name: Keep stack up for 5 minutes (manual check window)
        shell: bash
        run: |
          echo "üïí Application running for 5 minutes... verify via browser."
          sleep 300

      # ‚õî Bring down the stack
      - name: Bring stack down
        if: always()
        run: $DOCKER_CMD compose -f "$COMPOSE_FILE_CI" down -v
